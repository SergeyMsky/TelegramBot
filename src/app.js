require('dotenv').config()
const TelegramBot = require('node-telegram-bot-api')
const bot = new TelegramBot(process.env.TOKEN, { polling: true })
const command = require('./commands')
const helper = require('./helper')
const keyboard = require('./keyboard')

bot.setMyCommands(command)

bot.onText(/\/start/, async (msg) => {
   const messageStart = `üôã‚Äç‚ôÇÔ∏è <i>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —á–µ–ª–æ–≤–µ–∫ ${msg.from.first_name}!</i>`

   return bot.sendMessage(helper.chatId(msg), messageStart, { parse_mode: 'HTML' })
})

bot.onText(/\/info/, async (msg) => {
   const messageInfo = '<b><i>üë®üèª‚Äçüè≠ –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:</i></b>\n\nüëÆüèª‚Äç‚ôÇÔ∏è –í–∑–ª–∞–º—ã–≤–∞—é –ø–µ–Ω—Ç–∞–≥–æ–Ω, –Ω–æ —ç—Ç–æ, –µ—Å–ª–∏ –æ—á–µ–Ω—å –Ω–∞–¥–æ...\nüîÆ –û—Ç–≤–µ—á–∞—é –Ω–∞ –≥–ª–∞–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∂–∏–∑–Ω–∏, –≤—Å–µ–ª–µ–Ω–Ω–æ–π –∏ –≤—Å–µ–≥–æ —Ç–∞–∫–æ–≥–æ...\nüé≤ –ü–æ–º–æ–≥–∞—é —Å –ø—Ä–∏–Ω—è—Ç–∏–µ–º —Ä–µ—à–µ–Ω–∏—è, –ø–æ–¥–∫–∏–Ω—É–≤ –º–æ–Ω–µ—Ç–∫—É!\nü§πüèª‚Äç‚ôÇÔ∏è –ú–æ–∂–µ–º —Å—ã–≥—Ä–∞—Ç—å –≤ –∏–≥—Ä—É - –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞, —è—â–µ—Ä–∏—Ü–∞, —Å–ø–æ–∫. –ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–æ—Å—Ç—ã–µ, —è –æ–±—ä—è—Å–Ω—é! –ñ–º–∏—Ç–µ /cuefa.\nüé± –ú–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∫–∞–∫ –≤–æ–ª—à–µ–±–Ω—ã–π —à–∞—Ä 8, —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞–π—Ç–µ –µ–≥–æ, —Å–æ –∑–Ω–∞–∫–æ–º ¬´?¬ª.'

   return bot.sendMessage(helper.chatId(msg), messageInfo, { parse_mode: 'HTML' })
})

bot.onText(/\/cuefa/, async (msg) => {
   const rulesCuefa = '<b>–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã:</b>\n\n<code>üíÅ‚Äç‚ôÇÔ∏è –í—Å—ë –¥–æ–≤–æ–ª—å–Ω–æ –ø—Ä–æ—Å—Ç–æ!</code>\n<i>–ù–æ–∂–Ω–∏—Ü—ã —Ä–µ–∂—É—Ç –±—É–º–∞–≥—É. –ë—É–º–∞–≥–∞ –∑–∞–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –∫–∞–º–µ–Ω—å. –ö–∞–º–µ–Ω—å –¥–∞–≤–∏—Ç —è—â–µ—Ä–∏—Ü—É, –∞ —è—â–µ—Ä–∏—Ü–∞ —Ç—Ä–∞–≤–∏—Ç –°–ø–æ–∫–∞, –≤ —Ç–æ –≤—Ä–µ–º—è –∫–∞–∫ –°–ø–æ–∫ –ª–æ–º–∞–µ—Ç –Ω–æ–∂–Ω–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ, –≤ —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å, –æ—Ç—Ä–µ–∑–∞—é—Ç –≥–æ–ª–æ–≤—É —è—â–µ—Ä–∏—Ü–µ, –∫–æ—Ç–æ—Ä–∞—è –µ—Å—Ç –±—É–º–∞–≥—É, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π —É–ª–∏–∫–∏ –ø—Ä–æ—Ç–∏–≤ –°–ø–æ–∫–∞. –°–ø–æ–∫ –∏—Å–ø–∞—Ä—è–µ—Ç –∫–∞–º–µ–Ω—å, –∞ –∫–∞–º–µ–Ω—å, —Ä–∞–∑—É–º–µ–µ—Ç—Å—è, –∑–∞—Ç—É–ø–ª—è–µ—Ç –Ω–æ–∂–Ω–∏—Ü—ã.</i>'

   return bot.sendMessage(helper.chatId(msg), rulesCuefa, {
      parse_mode: 'HTML',
      reply_markup: {
         inline_keyboard: [keyboard.startCuefa],
      },
   })
})

bot.on('callback_query', async (query) => {
   const chatId = query.message.chat.id
   const messageId = query.message.message_id
   const data = query.data

   const cuefaHash = {
      stone: ['scissors', 'lizard'],
      scissors: ['paper', 'lizard'],
      paper: ['stone', 'spock'],
      lizard: ['paper', 'spock'],
      spock: ['stone', 'scissors'],
   }

   if (data === 'startCuefa') {
      await bot.editMessageText('ü§πüèª‚Äç‚ôÇÔ∏è –ß—Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç–µ?', {
         chat_id: chatId,
         message_id: messageId,
      })
      return bot.editMessageReplyMarkup(
         {
            inline_keyboard: [Object.keys(cuefaHash).map((item) => ({ text: item, callback_data: item }))],
         },
         {
            chat_id: chatId,
            message_id: messageId,
         }
      )
   } else {
      const botSelect = helper.randomHash(cuefaHash)
      const text = helper.compare(cuefaHash, botSelect, data)
      const msgText = `<i>–Ø –≤—ã–±—Ä–∞–ª</i> - <b>${botSelect}</b>\n<i>–í–∞—à –≤—ã–±–æ—Ä</i> - <b>${data}</b>\n<code>${text}</code>\n\nüë®‚Äçüíª –°—ã–≥—Ä–∞–µ–º –µ—â–µ —Ä–∞–∑?`

      await bot.editMessageText(msgText, {
         parse_mode: 'HTML',
         chat_id: chatId,
         message_id: messageId,
      })
      await bot.editMessageReplyMarkup(
         {
            inline_keyboard: [keyboard.startCuefa],
         },
         {
            chat_id: chatId,
            message_id: messageId,
         }
      )
   }
})

bot.on('message', async (msg) => {
   const options = ['/start', '/info', '/cuefa', '—É–º–µ–µ—à—å', '–≤–æ–ø—Ä–æ—Å', '—Å–ø—Ä–æ—Å–∏—Ç—å', '?', '–ø–µ–Ω—Ç–∞–≥–æ–Ω', '–∂–∏–∑–Ω', '–º–æ–Ω–µ—Ç–∫']
   const anything = [`${msg.from.first_name}, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –º–æ–∂–µ—Ç —Å–ø—Ä–æ—Å–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â—ë?`, `–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å /info, —á—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é.`, `${msg.from.first_name}, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.`, `–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç.`]

   if (!helper.includes(options, msg)) {
      return bot.sendMessage(helper.chatId(msg), helper.random(anything))
   }
})

bot.on('message', async (msg) => {
   const text = msg.text.toLowerCase()
   const chatId = msg.chat.id

   const messageHack = `üî¥ _–í–∑–ª–æ–º –ø–µ–Ω—Ç–∞–≥–æ–Ω–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ..._`
   const messageHackEdit = `üü¢ –ü–µ–Ω—Ç–∞–≥–æ–Ω —É—Å–ø–µ—à–Ω–æ –≤–∑–ª–æ–º–∞–Ω!`

   const messageLife = `üïµüèª‚Äç‚ôÇÔ∏è _–ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞, –Ω–∞ –≥–ª–∞–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∂–∏–∑–Ω–∏, –≤—Å–µ–ª–µ–Ω–Ω–æ–π –∏ –≤—Å–µ–≥–æ —Ç–∞–∫–æ–≥–æ..._`
   const messageLifeEdit = `‚òùÔ∏è –û—Ç–≤–µ—Ç –Ω–∞–π–¥–µ–Ω.`
   const messageLifeAnswer = `üëå –Ø –≤—Å—ë –æ—á–µ–Ω—å —Ç—â–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–ª. –û—Ç–≤–µ—Ç - —Å–æ—Ä–æ–∫ –¥–≤–∞.`

   helper.progress(bot, '–ø–µ–Ω—Ç–∞–≥–æ–Ω', messageHack, messageHackEdit, text, chatId)
   helper.progress(bot, '–∂–∏–∑–Ω', messageLife, messageLifeEdit, text, chatId, messageLifeAnswer)
})

bot.on('message', async (msg) => {
   let coinArr = ['–û—Ä—ë–ª.', '–í—ã–ø–∞–ª –æ—Ä—ë–ª.', '–†–µ—à–∫–∞.', '–í—ã–ø–∞–ª–∞ —Ä–µ—à–∫–∞.', '–û–π, –∑–∞–∫–∞—Ç–∏–ª–∞—Å—å –ø–æ–¥ –∫—Ä–æ–≤–∞—Ç—å']
   let coinOut = coinArr.slice(0, 4)
   let coinFull = [].concat(...Array(4).fill(coinOut))
   coinArr.push(...coinFull)

   if (helper.text(msg).match('–º–æ–Ω–µ—Ç–∫')) {
      return bot.sendMessage(helper.chatId(msg), helper.random(coinArr))
   }
})

bot.on('message', async (msg) => {
   let magicArr = ['–ë–µ—Å—Å–ø–æ—Ä–Ω–æ.', '–ü—Ä–µ–¥—Ä–µ—à–µ–Ω–æ.', '–ù–∏–∫–∞–∫–∏—Ö —Å–æ–º–Ω–µ–Ω–∏–π.', '–û–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ –¥–∞.', '–ú–æ–∂–µ—Ç–µ –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω–Ω—ã–º–∏ –≤ —ç—Ç–æ–º.', '–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è ‚Äî ¬´–¥–∞¬ª.', '–í–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ.', '–•–æ—Ä–æ—à–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã.', '–ó–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç ‚Äî ¬´–¥–∞¬ª.', '–î–∞.', '–ü–æ–∫–∞ –Ω–µ —è—Å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', '–°–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–∑–∂–µ.', '–õ—É—á—à–µ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å.', '–°–µ–π—á–∞—Å –Ω–µ–ª—å–∑—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å.', '–°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏ —Å–ø—Ä–æ—Å–∏—Ç–µ –æ–ø—è—Ç—å.', '–î–∞–∂–µ –Ω–µ –¥—É–º–∞–π—Ç–µ.', '–ú–æ–π –æ—Ç–≤–µ—Ç ‚Äî ¬´–Ω–µ—Ç¬ª.', '–ü–æ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º ‚Äî ¬´–Ω–µ—Ç¬ª.', '–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ.', '–í–µ—Å—å–º–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ.']

   if (helper.text(msg).match('–≤–æ–ø—Ä–æ—Å') || helper.text(msg).match('—Å–ø—Ä–æ—Å–∏—Ç—å')) {
      await bot.sendMessage(helper.chatId(msg), 'üé± –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ –∑–Ω–∞–∫–æ–º ¬´?¬ª.')
   } else if (helper.text(msg).match('\\?')) {
      return bot.sendMessage(helper.chatId(msg), helper.random(magicArr))
   }
})
